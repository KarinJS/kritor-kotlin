syntax = "proto3";

package kritor.group;

option csharp_namespace = "Kritor.Group";
option java_multiple_files = true;
option java_package = "io.kritor.group";

import "kritor/group/group_data.proto";

service GroupService {
  rpc BanUser(BanUserRequest) returns (BanUserResponse); // 禁言用户

  rpc GetGroupInfo(GetGroupInfoRequest) returns (GetGroupInfoResponse); // 获取群信息
  rpc GetGroupList(GetGroupListRequest) returns (GetGroupListResponse); // 获取群列表

  rpc GetProhibitedUserList(GetProhibitedUserListRequest) returns (GetProhibitedUserListResponse); // 获取禁言用户列表
  rpc GetRemainCountAtAll(GetRemainCountAtAllRequest) returns (GetRemainCountAtAllResponse); // 获取艾特全体成员剩余次数
  rpc GetNotJoinedGroupInfo(GetNotJoinedGroupInfoRequest) returns (GetNotJoinedGroupInfoResponse); // 获取未加入群组信息
  rpc GetGroupHonor(GetGroupHonorRequest) returns (GetGroupHonorResponse); // 获取群荣誉信息
}

message BanUserRequest {
  uint64 user_id = 1; // 被禁言目标
  uint64 group_id = 2; // 群组ID
  uint64 duration = 3; // 禁言时长(单位：秒)
}

message BanUserResponse {
  bool success = 1; // 是否成功，根据oidb返回的状态码进行判断即可
}

message GetGroupInfoRequest {
  uint64 group_id = 1; // 群组ID
}

message GetGroupInfoResponse {
  GroupInfo group_info = 1; // 群组信息
}

message GetGroupListRequest {
  bool refresh = 1; // 是否刷新缓存
}

message GetGroupListResponse {
  repeated GroupInfo group_info = 1; // 群组信息
}

message GetProhibitedUserListRequest {
  uint64 group_id = 1; // 群组ID
}

message GetProhibitedUserListResponse {
  repeated ProhibitedUserInfo prohibited_user_info = 1; // 禁言用户信息
}

message GetRemainCountAtAllRequest {
  uint64 group_id = 1; // 群组ID
}

message GetRemainCountAtAllResponse {
  uint32 remain_count = 1; // 剩余次数
}

message GetNotJoinedGroupInfoRequest {
  uint64 group_id = 1; // 群号
}

message GetNotJoinedGroupInfoResponse {
  repeated NotJoinedGroupInfo group_info = 1; // 未加入群组信息
}

message GetGroupHonorRequest {
  uint64 group_id = 1; // 群号
  bool refresh = 2; // 是否刷新缓存
}

message GetGroupHonorResponse {
  repeated GroupHonorInfo group_honor_info = 1; // 群荣誉信息
}